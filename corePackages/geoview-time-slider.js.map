{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@5.15.14_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.74_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { logger } from '@/core/utils/logger';\n\n/** ******************************************************************************************************************************\n * Footer Plugin abstract class.\n */\nexport abstract class FooterPlugin extends AbstractPlugin {\n  // Store index of tab\n  value?: number;\n\n  // Store the footer props\n  footerProps?: TypeTabs;\n\n  /**\n   * Overridable function to create footer props content\n   * @returns TypeTabs The footer props content\n   */\n  onCreateContentProps(): TypeTabs {\n    // Override this to create the footer props..\n\n    // Return dummy content\n    return {\n      id: 'some-id',\n      value: this.value!,\n      label: 'Some label',\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\n    };\n  }\n\n  /**\n   * Called when a footer plugin is being added\n   */\n  onAdd(): void {\n    // Log\n    // No need to log, parent class does it well already via added() function.\n\n    // Set value to length of tabs(?)\n    this.value = this.map()?.footerBarApi.tabs.length;\n\n    // Create props\n    this.footerProps = this.onCreateContentProps();\n\n    // Create tab with the props\n    this.map()?.footerBarApi.createTab(this.footerProps);\n  }\n\n  /**\n   * Called when a footer plugin is being removed\n   */\n  onRemove(): void {\n    // Log\n    // No need to log, parent class does it well already via removed() function.\n\n    // Remove the footer tab\n    if (this.value) this.map()?.footerBarApi.removeTab(this.footerProps!.id);\n  }\n\n  /**\n   * Called when a footer plugin has been selected in the tabs\n   */\n  onSelected(): void {\n    // Log\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\n\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\n\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\n  }\n}\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n  _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n      className,\n      children,\n      classes: classesProp = {},\n      IconComponent = ArrowDropDownIcon,\n      input = defaultInput,\n      inputProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n  const classes = useUtilityClasses(ownerState);\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { Theme } from '@mui/material/styles';\n\nexport const getSxClasses = (theme: Theme) => ({\n  panelHeaders: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    marginBottom: '20px',\n  },\n  rightPanelContainer: {\n    border: `2px solid ${theme.palette.primary.main}`,\n    borderRadius: '5px',\n    backgroundColor: theme.palette.common.white,\n  },\n  rightPanelBtnHolder: {\n    marginTop: '20px',\n    marginBottom: '9px',\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\n  },\n  timeSliderInstructionsTitle: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    lineHeight: '1.5em',\n  },\n  timeSliderInstructionsBody: {\n    fontSize: '1rem',\n  },\n});\n","import { useTheme } from '@mui/material/styles';\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { useTimeSliderLayers, useTimeSliderStoreActions } from 'geoview-core/src/core/stores';\nimport { getLocalizedValue } from 'geoview-core/src/core/utils/utilities';\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { getSxClasses } from './time-slider-style';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TimeSliderPanelProps {\n  config: ConfigProps;\n  mapId: string;\n  layerPath: string;\n}\n\n/**\n * Creates a panel with time sliders\n *\n * @param {TimeSliderPanelProps} TimeSliderPanelProps time slider panel properties\n * @returns {JSX.Element} the slider panel\n */\nexport function TimeSlider(TimeSliderPanelProps: TimeSliderPanelProps): JSX.Element {\n  const { cgpv } = window;\n  const { config, layerPath, mapId } = TimeSliderPanelProps;\n  const { api, react, ui } = cgpv;\n  const { useState, useRef, useEffect, useCallback } = react;\n  const {\n    Grid,\n    Slider,\n    Typography,\n    Checkbox,\n    Tooltip,\n    IconButton,\n    LockIcon,\n    LockOpenIcon,\n    ArrowLeftIcon,\n    PlayArrowIcon,\n    PauseIcon,\n    ArrowRightIcon,\n    SwitchRightIcon,\n    SwitchLeftIcon,\n  } = ui.elements;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const playIntervalRef = useRef<number>();\n\n  // References for play button\n  const sliderValueRef = useRef<number>();\n  const sliderDeltaRef = useRef<number>();\n\n  // Get actions and states from store\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setFiltering } =\n    useTimeSliderStoreActions();\n  const displayLanguage = useAppDisplayLanguage();\n\n  // TODO: check performance as we should technically have one selector by constant\n  const {\n    title,\n    description,\n    name,\n    defaultValue,\n    discreteValues,\n    range,\n    minAndMax,\n    field,\n    fieldAlias,\n    filtering,\n    singleHandle,\n    values,\n    delay,\n    locked,\n    reversed,\n  } = useTimeSliderLayers()[layerPath];\n\n  // slider config\n  useEffect(() => {\n    // TODO: add mechanism to initialize these values during store onInitialize\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (title === undefined) setTitle(layerPath, getLocalizedValue(sliderConfig?.title, displayLanguage) || '');\n    if (description === undefined) setDescription(layerPath, getLocalizedValue(sliderConfig?.description, displayLanguage) || '');\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (sliderConfig?.defaultValue) {\n      // update values based on slider's default value\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\n      if (defaultValueIsArray) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue[0]).getTime(), new Date(sliderConfig?.defaultValue[1]).getTime()]);\n      } else if (range.includes(sliderConfig?.defaultValue)) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue).getTime()]);\n      } else {\n        setValues(layerPath, [new Date(range[0]).getTime()]);\n      }\n    }\n  }, [config, layerPath, range, setFiltering, setValues]);\n\n  const timeStampRange = range.map((entry: string | number | Date) => new Date(entry).getTime());\n  // Check if range occurs in a single day or year\n  const timeDelta = minAndMax[1] - minAndMax[0];\n  const dayDelta = new Date(minAndMax[1]).getDate() - new Date(minAndMax[0]).getDate();\n  const yearDelta = new Date(minAndMax[1]).getFullYear() - new Date(minAndMax[0]).getFullYear();\n  let timeframe: string | undefined;\n  if (dayDelta === 0 && timeDelta < 86400000) timeframe = 'day';\n  else if (yearDelta === 0) timeframe = 'year';\n\n  let timeMarks: number[] = [];\n  if (range.length < 4 && discreteValues) {\n    const interval = (new Date(range[range.length - 1]).getTime() - new Date(range[0]).getTime()) / 4;\n    timeMarks = [minAndMax[0], minAndMax[0] + interval, minAndMax[0] + interval * 2, minAndMax[0] + interval * 3, minAndMax[1]];\n  } else if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\n  else {\n    timeMarks = [\n      minAndMax[0],\n      new Date(range[Math.round(range.length / 4)]).getTime(),\n      new Date(range[Math.round(range.length / 2)]).getTime(),\n      new Date(range[Math.round((3 * range.length) / 4)]).getTime(),\n      minAndMax[1],\n    ];\n  }\n\n  const sliderMarks = [];\n  for (let i = 0; i < timeMarks.length; i++) {\n    sliderMarks.push({\n      value: timeMarks[i],\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      label: timeframe\n        ? `${timeframe === 'day' ? new Date(timeMarks[i]).toTimeString().split(' ')[0] : new Date(timeMarks[i]).toISOString().slice(5, 10)}`\n        : new Date(timeMarks[i]).toISOString().slice(0, 10),\n    });\n  }\n\n  /**\n   * Create labels for values on slider\n   *\n   * @param {number} value The value of the slider handle\n   * @returns {string} A formatted time string or ISO date string\n   */\n  function valueLabelFormat(value: number): string {\n    // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n    if (timeframe === 'day') return new Date(value).toTimeString().split(' ')[0].replace(/^0/, '');\n    if (timeframe === 'year') return new Date(value).toISOString().slice(5, 10);\n    return new Date(value).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Moves the slider handle(s) back one increment\n   */\n  function moveBack(): void {\n    if (singleHandle && !discreteValues) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[0]) newIndex = timeStampRange.length - 1;\n      else newIndex = currentIndex - 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else if (singleHandle) {\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\n      const newPosition = values[0] - interval < minAndMax[0] ? minAndMax[1] : values[0] - interval;\n      setValues(layerPath, [newPosition]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\n      if (!sliderDeltaRef.current) {\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\n          setValues(layerPath, [rightHandle - sliderDeltaRef.current, rightHandle]);\n          return;\n        }\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        if (leftHandle === minAndMax[0]) leftHandle = rightHandle;\n        leftHandle -= sliderDeltaRef.current;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n      } else if (locked) {\n        rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle < leftHandle) rightHandle = leftHandle;\n        if (rightHandle === leftHandle) [, rightHandle] = minAndMax;\n      } else {\n        if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\n        else rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\n        leftHandle = rightHandle - sliderDeltaRef.current!;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n        if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  /**\n   * Moves the slider handle(s) forward one increment\n   */\n  function moveForward(): void {\n    if (singleHandle && !discreteValues) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[1]) newIndex = 0;\n      else newIndex = currentIndex + 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else if (singleHandle) {\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\n      const newPosition = values[0] + interval > minAndMax[1] ? minAndMax[0] : values[0] + interval;\n      setValues(layerPath, [newPosition]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\n      if (!sliderDeltaRef.current) {\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\n          setValues(layerPath, [leftHandle, leftHandle + sliderDeltaRef.current]);\n          return;\n        }\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= rightHandle) [leftHandle] = minAndMax;\n      } else if (locked) {\n        if (rightHandle === minAndMax[1]) rightHandle = leftHandle;\n        rightHandle += sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n      } else {\n        if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\n        else leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\n        rightHandle = leftHandle + sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n        if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  // #region USE EFFECT\n  useEffect(() => {\n    // If slider cycle is active, pause before advancing to next increment\n    if (isPlaying) {\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, filtering, reversed, locked]);\n\n  // When slider cycle is activated, advance to first increment without delay\n  useEffect(() => {\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying]);\n  // #endregion\n\n  // #region HANDLE FUNCTIONS\n  function handleBack(): void {\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    moveBack();\n  }\n\n  function handleForward(): void {\n    [sliderValueRef.current] = values;\n    moveForward();\n  }\n\n  function handleLock(): void {\n    clearTimeout(playIntervalRef.current);\n    setLocked(layerPath, !locked);\n  }\n\n  function handlePlay(): void {\n    clearTimeout(playIntervalRef.current);\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    setIsPlaying(!isPlaying);\n  }\n\n  function handleReverse(): void {\n    clearTimeout(playIntervalRef.current);\n    setReversed(layerPath, !reversed);\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n  }\n\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setDelay(layerPath, event.target.value as unknown as number);\n  }\n\n  function handleCheckbox(newValue: boolean): void {\n    setFiltering(layerPath, newValue);\n    if (!newValue) {\n      clearInterval(playIntervalRef.current);\n      setIsPlaying(false);\n    }\n  }\n  // #endregion\n\n  function returnLockTooltip(): string {\n    if (reversed) {\n      const text = locked\n        ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockRight', displayLanguage)\n        : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockRight', displayLanguage);\n      return text;\n    }\n    const text = locked\n      ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockLeft', displayLanguage)\n      : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockLeft', displayLanguage);\n    return text;\n  }\n\n  const handleSliderChange = useCallback(\n    (event: number | number[]): void => {\n      clearTimeout(playIntervalRef.current);\n      setIsPlaying(false);\n      sliderDeltaRef.current = undefined;\n      setValues(layerPath, event as number[]);\n    },\n    [layerPath, setValues]\n  );\n\n  return (\n    <Grid>\n      <div style={sxClasses.rightPanelContainer}>\n        <Grid container sx={sxClasses.rightPanelBtnHolder}>\n          <Grid item xs={9}>\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\n              {`${title || name}`}\n              {timeframe !== undefined &&\n                ` (${timeframe === 'day' ? new Date(defaultValue).toLocaleDateString() : new Date(defaultValue).getFullYear()})`}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <div style={{ textAlign: 'right', marginRight: '25px' }}>\n              <Tooltip\n                title={\n                  filtering\n                    ? api.utilities.core.getLocalizedMessage('timeSlider.slider.disableFilter', displayLanguage)\n                    : api.utilities.core.getLocalizedMessage('timeSlider.slider.enableFilter', displayLanguage)\n                }\n                placement=\"top\"\n                enterDelay={1000}\n              >\n                <Checkbox checked={filtering} onChange={(event: never, child: boolean) => handleCheckbox(child)} />\n              </Tooltip>\n            </div>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            <Slider\n              sliderId={layerPath}\n              mapId={mapId}\n              style={{ width: '80%', color: 'primary' }}\n              min={minAndMax[0]}\n              max={minAndMax[1]}\n              value={values}\n              valueLabelFormat={(value: number) => valueLabelFormat(value)}\n              marks={sliderMarks}\n              step={!discreteValues ? null : 0.1}\n              customOnChange={handleSliderChange}\n              key={values[1] ? values[1] + values[0] : values[0]}\n            />\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            {!singleHandle && (\n              <IconButton\n                className=\"style1\"\n                aria-label={returnLockTooltip()}\n                tooltip={returnLockTooltip()}\n                tooltipPlacement=\"top\"\n                onClick={() => handleLock()}\n              >\n                {locked ? <LockIcon /> : <LockOpenIcon />}\n              </IconButton>\n            )}\n            <IconButton\n              className=\"style1\"\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.back', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.back\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleBack()}\n            >\n              <ArrowLeftIcon />\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={\n                isPlaying\n                  ? (api.utilities.core.getLocalizedMessage('timeSlider.slider.pauseAnimation', displayLanguage) as string)\n                  : (api.utilities.core.getLocalizedMessage('timeSlider.slider.playAnimation', displayLanguage) as string)\n              }\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\n              tooltipPlacement=\"top\"\n              disabled={!filtering}\n              onClick={() => handlePlay()}\n            >\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.forward', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.forward\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleForward()}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.changeDirection', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.changeDirection\"\n              tooltipPlacement=\"top\"\n              onClick={() => handleReverse()}\n            >\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\n            </IconButton>\n            <FormControl sx={{ width: '150px' }}>\n              <InputLabel variant=\"standard\">\n                {api.utilities.core.getLocalizedMessage('timeSlider.slider.timeDelay', displayLanguage)}\n              </InputLabel>\n              <NativeSelect\n                defaultValue={delay}\n                inputProps={{\n                  name: 'timeDelay',\n                  onChange: (event) => handleTimeChange(event),\n                }}\n              >\n                <option value={500}>0.5s</option>\n                <option value={750}>0.75s</option>\n                <option value={1000}>1.0s</option>\n                <option value={1500}>1.5s</option>\n                <option value={2000}>2.0s</option>\n                <option value={3000}>3.0s</option>\n                <option value={5000}>5.0s</option>\n              </NativeSelect>\n            </FormControl>\n          </div>\n        </Grid>\n        {description && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {description}\n            </Typography>\n          </Grid>\n        )}\n        {fieldAlias && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {`${fieldAlias} (${field})`}\n            </Typography>\n          </Grid>\n        )}\n      </div>\n    </Grid>\n  );\n}\n","import { useTheme } from '@mui/material/styles';\nimport { TypeWindow } from 'geoview-core/src/core/types/global-types';\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\nimport { TypeTimeSliderValues, useMapVisibleLayers, useTimeSliderLayers } from 'geoview-core/src/core/stores';\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { Box, Paper, Typography } from 'geoview-core/src/ui';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\nimport { ReactNode } from 'react';\nimport { TimeSlider } from './time-slider';\nimport { ConfigProps } from './time-slider-types';\nimport { getSxClasses } from './time-slider-style';\n\ninterface TypeTimeSliderProps {\n  configObj: ConfigProps;\n  mapId: string;\n}\n\n/**\n * Time slider tab\n *\n * @param {TypeTimeSliderProps} props The properties passed to slider\n * @returns {JSX.Element} the time slider tab\n */\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\n  const { mapId, configObj } = props;\n  const { cgpv } = window as TypeWindow;\n  const { api, react } = cgpv;\n  const { useState, useCallback, useMemo, useEffect } = react;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state\n  const [selectedLayerPath, setSelectedLayerPath] = useState<string>();\n\n  // get values from store\n  const visibleLayers = useMapVisibleLayers() as string[];\n  const timeSliderLayers = useTimeSliderLayers();\n  const displayLanguage = useAppDisplayLanguage();\n\n  /**\n   * handle Layer list when clicked on each layer.\n   * @param {LayerListEntry} layer layer clicked by the user.\n   */\n  const handleClickLayerList = useCallback((layer: LayerListEntry) => {\n    // Log\n    logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\n\n    // Set the layer path\n    setSelectedLayerPath(layer.layerPath);\n  }, []);\n\n  /**\n   * Get dates for current filters\n   * @param {TypeTimeSliderValuesListEntry} timeSliderLayerInfo Time slider layer info.\n   */\n  const getFilterInfo = (timeSliderLayerInfo: TypeTimeSliderValues): string | null => {\n    if (timeSliderLayerInfo.filtering)\n      return timeSliderLayerInfo.values.length === 1\n        ? new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)\n        : `${new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)} - ${new Date(timeSliderLayerInfo.values[1])\n            .toISOString()\n            .slice(0, 19)}`;\n    return null;\n  };\n\n  // Reacts when the array of layer data updates\n  const memoLayersList = useMemo(() => {\n    // Log\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\n\n    /**\n     * Create layer tooltip\n     * @param {TypeTimeSliderValues} timeSliderLayerInfo Time slider layer info.\n     * @returns\n     */\n    const getLayerTooltip = (timeSliderLayerInfo: TypeTimeSliderValues): ReactNode => {\n      return (\n        <Box sx={{ display: 'flex', alignContent: 'center', '& svg ': { width: '0.75em', height: '0.75em' } }}>\n          {timeSliderLayerInfo.name}\n          {timeSliderLayerInfo.filtering && `: ${getFilterInfo(timeSliderLayerInfo)}`}\n        </Box>\n      );\n    };\n\n    // Return the layers\n    return visibleLayers\n      .map((layerPath) => {\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\n      })\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\n      .map((layer) => {\n        return {\n          layerName: layer.timeSliderLayerInfo.name,\n          layerPath: layer.layerPath,\n          layerFeatures: getFilterInfo(layer.timeSliderLayerInfo),\n          tooltip: getLayerTooltip(layer.timeSliderLayerInfo),\n          layerStatus: 'loaded',\n          queryStatus: 'processed',\n        } as LayerListEntry;\n      });\n  }, [timeSliderLayers, visibleLayers]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\n\n    // If the selected layer path isn't in the list of layers possible, clear it\n    if (selectedLayerPath && !memoLayersList.map((layer) => layer.layerPath).includes(selectedLayerPath)) {\n      // Clear the selected layer path\n      setSelectedLayerPath('');\n    }\n  }, [memoLayersList, selectedLayerPath]);\n\n  return (\n    <Layout selectedLayerPath={selectedLayerPath} onLayerListClicked={handleClickLayerList} layerList={memoLayersList}>\n      {selectedLayerPath && <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />}\n      {!selectedLayerPath && (\n        <Paper sx={{ padding: '2rem' }}>\n          <Typography variant=\"h3\" gutterBottom sx={sxClasses.timeSliderInstructionsTitle}>\n            {api.utilities.core.getLocalizedMessage('timeSlider.instructions', displayLanguage)}\n          </Typography>\n          <Typography component=\"p\" sx={sxClasses.timeSliderInstructionsBody}>\n            {api.utilities.core.getLocalizedMessage('timeSlider.instructions', displayLanguage)}\n          </Typography>\n        </Paper>\n      )}\n    </Layout>\n  );\n}\n","import { TypeJsonObject, toJsonObject, Cast, AnySchemaObject } from 'geoview-core/src/core/types/global-types';\nimport { TimeDimension } from 'geoview-core/src/core/utils/date-mgt';\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\nimport { api } from 'geoview-core';\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\n\nimport { TimeSliderPanel } from './time-slider-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-time-slider-panel.json';\nimport { SliderProps } from './time-slider-types';\n\nexport interface LayerProps {\n  layerPath: string;\n  layerName: string;\n}\nexport interface SliderFilterProps {\n  title: string;\n  description: string;\n  range: string[];\n  defaultValue: string;\n  minAndMax: number[];\n  field: string;\n  singleHandle: boolean;\n  values: number[];\n  filtering: boolean;\n  delay: number;\n  locked: boolean;\n  reversed: boolean;\n}\n\n/**\n * Time slider plugin\n */\nclass TimeSliderPlugin extends FooterPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      timeSlider: {\n        title: 'Time Slider',\n        panel: {\n          noLayers: 'No layers with temporal data',\n        },\n        slider: {\n          unlockRight: 'Unlock right handle',\n          unlockLeft: 'Unlock left handle',\n          lockRight: 'Lock right handle',\n          lockLeft: 'Lock left handle',\n          disableFilter: 'Disable Filtering',\n          enableFilter: 'Enable Filtering',\n          pauseAnimation: 'Pause animation',\n          playAnimation: 'Play animation',\n          back: 'Back',\n          forward: 'Forward',\n          changeDirection: 'Change animation direction',\n          timeDelay: 'Animation time delay',\n        },\n        instructions: 'Time Slider Instructions',\n      },\n    },\n    fr: {\n      timeSlider: {\n        title: 'Curseur Temporel',\n        panel: {\n          noLayers: 'Pas de couches avec des données temporelles',\n        },\n        slider: {\n          unlockRight: 'Déverrouiller la poignée droite',\n          unlockLeft: 'Déverrouiller la poignée gauche',\n          lockRight: 'Verrouiller la poignée droite',\n          lockLeft: 'Verrouiller la poignée gauche',\n          disableFilter: 'Désactiver le filtrage',\n          enableFilter: 'Activer le filtrage',\n          pauseAnimation: `Pause de l'animation`,\n          playAnimation: `Jouer l'animation`,\n          back: 'Retour',\n          forward: 'En avant',\n          changeDirection: `Changer la direction de l'animation`,\n          timeDelay: `Délai d'animation`,\n        },\n        instructions: 'Instructions Curseur Temporel',\n      },\n    },\n  });\n\n  onCreateContentProps = (): TypeTabs => {\n    // Set custom time dimension if applicable\n    this.configObj.sliders.forEach((obj: SliderProps) => {\n      if (obj.temporalDimension) {\n        const timeDimension: TimeDimension = {\n          field: obj.temporalDimension.field,\n          default: obj.temporalDimension.default,\n          unitSymbol: obj.temporalDimension.unitSymbol,\n          nearestValues: obj.temporalDimension.nearestValues,\n          range: api.utilities.date.createRangeOGC(obj.temporalDimension.range as unknown as string),\n          singleHandle: obj.temporalDimension.singleHandle,\n        };\n\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\n        // TO.DOCONT: using event listeners, not at Plugin creation.\n        api.maps[this.pluginProps.mapId].layer.geoviewLayer(obj.layerPaths[0]).setTemporalDimension(obj.layerPaths[0], timeDimension);\n      }\n\n      // Set override default value under time dimension if applicable\n      if (obj.defaultValue) {\n        const layerPath = obj.layerPaths[0];\n        const timeDimension = api.maps[this.pluginProps.mapId].layer.geoviewLayer(layerPath).layerTemporalDimension[layerPath];\n        api.maps[this.pluginProps.mapId].layer.geoviewLayer(layerPath).setTemporalDimension(layerPath, {\n          ...timeDimension,\n          default: obj.defaultValue,\n        });\n      }\n    });\n\n    return {\n      id: 'time-slider',\n      value: this.value!,\n      label: 'timeSlider.title',\n      icon: <TimeSliderIcon />,\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\n    };\n  };\n}\n\nexport default TimeSliderPlugin;\n\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","_this$map","_this$map2","map","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","_this$map3","removeTab","logger","logTraceCore","AbstractPlugin","_excluded","_excluded2","defaultInput","Input","NativeSelect","inProps","ref","props","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","variant","type","undefined","clsx","muiName","getSxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelContainer","border","primary","main","borderRadius","backgroundColor","common","white","rightPanelBtnHolder","marginTop","boxShadow","timeSliderInstructionsTitle","lineHeight","timeSliderInstructionsBody","TimeSlider","TimeSliderPanelProps","cgpv","window","config","layerPath","api","react","ui","useState","useRef","useEffect","useCallback","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","useTheme","sxClasses","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setFiltering","displayLanguage","useAppDisplayLanguage","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","discreteValues","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","_config$sliders","sliderConfig","sliders","find","o","layerPaths","includes","getLocalizedValue","_config$sliders2","isArray","Date","getTime","timeframe","timeStampRange","entry","timeDelta","dayDelta","getDate","yearDelta","getFullYear","timeMarks","interval","Math","round","sliderMarks","i","push","toTimeString","split","toISOString","slice","moveBack","newIndex","currentIndex","indexOf","newPosition","_values","leftHandle","rightHandle","current","moveForward","_values2","returnLockTooltip","utilities","core","getLocalizedMessage","setTimeout","handleSliderChange","event","clearTimeout","_jsx","_jsxs","style","container","sx","item","xs","component","_objectSpread","paddingLeft","paddingTop","toLocaleDateString","textAlign","marginRight","placement","enterDelay","checked","onChange","child","newValue","clearInterval","sliderId","width","color","min","max","valueLabelFormat","replace","marks","step","customOnChange","tooltip","tooltipPlacement","onClick","disabled","_values3","FormControl","InputLabel","target","handleTimeChange","px","py","TimeSliderPanel","configObj","useMemo","selectedLayerPath","setSelectedLayerPath","visibleLayers","useMapVisibleLayers","timeSliderLayers","handleClickLayerList","layer","logTraceUseCallback","getFilterInfo","timeSliderLayerInfo","memoLayersList","logTraceUseMemo","filter","layerName","layerFeatures","Box","display","alignContent","height","layerStatus","queryStatus","logTraceUseEffect","Layout","onLayerListClicked","layerList","Paper","padding","gutterBottom","TimeSliderPlugin","_FooterPlugin","schema","toJsonObject","defaultConfig","en","timeSlider","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","instructions","fr","forEach","obj","temporalDimension","timeDimension","default","unitSymbol","nearestValues","date","createRangeOGC","maps","geoviewLayer","setTemporalDimension","layerTemporalDimension","icon","TimeSliderIcon","geoviewPlugins","Cast"],"sourceRoot":""}