{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel-style.ts","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx","webpack://geoview-core/./src/api/plugin/appbar-plugin.ts"],"sourcesContent":["import {\n  toJsonObject,\n  TypeBasemapProps,\n  TypeJsonObject,\n  TypeJsonArray,\n  SelectChangeEvent,\n  TypeViewSettings,\n  mapViewProjectionPayload,\n  TypeBasemapOptions,\n  TypeValidMapProjectionCodes,\n} from 'geoview-core';\nimport { useMapProjection } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\nimport { getSxClasses } from './basemap-panel-style';\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = window;\n  const myMap = cgpv.api.maps[mapId];\n\n  const { api, ui, react } = cgpv;\n  const { Select, Card, Box } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state and store values\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\n  const [canSwichProjection] = useState(config.canSwichProjection);\n  const projections: number[] =\n    (config.supportedProjections as TypeJsonArray).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  const storeProjection = useMapProjection();\n  const [mapProjection, setMapProjection] = useState(storeProjection);\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (basemapId: string) => {\n    // set the new basemap and update the active basemap variable\n    myMap.basemap.setBasemap(basemapId);\n    setActiveBasemapId(basemapId);\n  };\n\n  /**\n   *  Add basemaps from configuration for selected projection\n   *\n   * @param {number} projection the projection to create basemaps for\n   */\n  const createBasemapArray = async (projection: TypeValidMapProjectionCodes) => {\n    const basemapsArray = toJsonObject(\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\n    );\n    let isInit = false;\n\n    // reset the basemaps array\n    api.maps[mapId].basemap.basemaps = [];\n    setBasemapList([]);\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < (basemapsArray.customBasemaps.length as number); basemapIndex++) {\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\n      const basemap = api.maps[mapId].basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\n        setBasemap(basemap.basemapId!);\n        isInit = true;\n      }\n    }\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < (basemapsArray.coreBasemaps.length as number); basemapIndex++) {\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\n      // eslint-disable-next-line no-await-in-loop\n      const basemap = await api.maps[mapId].basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // set basemap if previously selected in previous projection\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\n      if (basemap && id === activeBasemapId && !isInit) {\n        setBasemap(activeBasemapId);\n        isInit = true;\n      }\n    }\n\n    // if previous basemap does not exist in previous projection, init first one\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].basemapId as string);\n  };\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {SelectChangeEvent} event select change element event\n   */\n  const setSelectedProjection = (event: SelectChangeEvent<unknown>) => {\n    const projection = event.target.value as TypeValidMapProjectionCodes;\n\n    // set basemap to no geom to clean up the view\n    setBasemap('nogeom');\n    setMapProjection(projection as TypeValidMapProjectionCodes);\n\n    // get view status (center and projection) to calculate new center\n    const currentView = myMap.getView();\n    const currentCenter = currentView.getCenter();\n    const currentProjection = currentView.getProjection().getCode();\n    const newCenter = api.projection.transformPoints([currentCenter], currentProjection, 'EPSG:4326')[0];\n    const newProjection = event.target.value as TypeValidMapProjectionCodes;\n\n    const newView: TypeViewSettings = {\n      zoom: currentView.getZoom() as number,\n      minZoom: currentView.getMinZoom(),\n      maxZoom: currentView.getMaxZoom(),\n      center: newCenter as [number, number],\n      projection: newProjection,\n    };\n\n    // set new view and basemaps array (with selected basemap)\n    myMap.setView(newView);\n    createBasemapArray(projection);\n\n    // emit an event to let know map view projection as changed\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    createBasemapArray(mapProjection);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Box sx={sxClasses.basemapCard}>\n      {canSwichProjection && (\n        <Select\n          fullWidth\n          labelId=\"projection-label\"\n          value={mapProjection}\n          onChange={setSelectedProjection}\n          label=\"Projection\"\n          style={{\n            display: config.canSwichProjection ? 'flex' : 'none',\n          }}\n          inputLabel={{\n            id: 'projection-label',\n          }}\n          menuItems={projections.map((value: number) => ({\n            key: value,\n            item: {\n              value,\n              children: `EPSG:${value}`,\n            },\n          }))}\n        />\n      )}\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          <Card\n            tabIndex={0}\n            className={basemap.basemapId === activeBasemapId ? 'active' : ''}\n            onClick={() => setBasemap(basemap.basemapId as string)}\n            onKeyPress={() => setBasemap(basemap.basemapId as string)}\n            key={basemap.basemapId}\n            title={basemap.name}\n            contentCard={\n              <>\n                {typeof basemap.thumbnailUrl === 'string' && (\n                  <img src={basemap.thumbnailUrl} alt={basemap.altText} className=\"basemapCardThumbnail\" />\n                )}\n                {Array.isArray(basemap.thumbnailUrl) &&\n                  (basemap.thumbnailUrl as string[]).map((thumbnail, index) => {\n                    // eslint-disable-next-line react/no-array-index-key\n                    return <img key={index} src={thumbnail} alt={basemap.altText} className=\"basemapCardThumbnail\" />;\n                  })}\n                <div className=\"basemapCardThumbnailOverlay\" />\n              </>\n            }\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","/* @ts-expect-error there is no mui style in this package */\nexport const getSxClasses = (theme) => ({\n  basemapCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '1px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.grey.A700} !important`,\n      color: theme.basemapPanel.header,\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .basemapCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .basemapCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.basemapPanel.overlayDefault,\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.basemapPanel.borderHover,\n      '& .MuiCardContent-root': {\n        '& .basemapCardThumbnailOverlay': {\n          backgroundColor: theme.basemapPanel.overlayHover,\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.basemapPanel.borderActive,\n      '& .MuiCardContent-root': {\n        '& .basemapCardThumbnailOverlay': {\n          backgroundColor: theme.basemapPanel.overlayActive,\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { Cast, TypeIconButtonProps, TypeWindow, toJsonObject, TypePanelProps, TypeJsonObject, AnySchemaObject } from 'geoview-core';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\n\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      basemapPanel: 'Basemaps',\n    },\n    fr: {\n      basemapPanel: 'Fond de carte',\n    },\n  });\n\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Button props\n    return {\n      id: 'basemapPanelButton',\n      tooltip: this.translations[this.displayLanguage()].basemapPanel as string,\n      tooltipPlacement: 'right',\n      children: <MapIcon />,\n      visible: true,\n    };\n  }\n\n  onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: this.translations[this.displayLanguage()].basemapPanel,\n      icon: '<i class=\"material-icons\">map</i>',\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  onCreateContent = (): JSX.Element => {\n    return <BasemapPanel mapId={this.pluginProps.mapId} config={this.configObj || {}} />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  onRemoved(): void {\n    // reset basemaps array\n    this.api.maps[this.pluginProps.mapId].basemap.basemaps = [];\n    // reload default basemap\n    this.api.maps[this.pluginProps.mapId].basemap.loadDefaultBasemaps();\n  }\n}\n\nexport default BasemapPanelPlugin;\n\nwindow.plugins = window.plugins || {};\nwindow.plugins['basemap-panel'] = Cast<BasemapPanelPlugin>(BasemapPanelPlugin);\n","import { TypeWindow, TypeButtonPanel, TypeIconButtonProps, TypePanelProps } from '@/core/types/cgpv-types';\nimport { AbstractPlugin } from './abstract-plugin';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypePanelProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps | undefined {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react!.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns TypePanelProps The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react!.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    const buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    const panelProps = this.onCreateContentProps();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.map()?.appBarButtons.createAppbarPanel(buttonProps!, panelProps, null) || undefined;\n\n    // Create content\n    const content = this.onCreateContent();\n\n    // Set panel content\n    this.buttonPanel?.panel?.changeContent(content);\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.map()?.appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n"],"names":["BasemapPanel","props","mapId","config","cgpv","window","myMap","api","maps","ui","react","_ui$elements","elements","Select","Card","Box","useState","useEffect","sxClasses","theme","basemapCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","transition","concat","basemapPanel","header","fontSize","fontWeight","margin","padding","height","width","order","position","objectFit","top","left","overlayDefault","cursor","borderColor","borderHover","overlayHover","borderActive","overlayActive","getSxClasses","useTheme","_useState","_useState2","_slicedToArray","basemapList","setBasemapList","_useState3","_useState4","activeBasemapId","setActiveBasemapId","_useState5","canSwichProjection","projections","supportedProjections","map","obj","projectionCode","_useState7","useMapProjection","_useState8","mapProjection","setMapProjection","setBasemap","basemapId","basemap","createBasemapArray","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","projection","basemapsArray","isInit","_loop","basemapIndex","_loop2","_basemapIndex","_context3","prev","next","toJsonObject","find","basemaps","customBasemap","_context","customBasemaps","createCustomBasemap","prevArray","_toConsumableArray","stop","length","delegateYield","basemapOptions","id","_context2","coreBasemaps","createCoreBasemap","sent","shaded","labeled","_x","apply","arguments","_jsxs","sx","children","_jsx","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","inputLabel","menuItems","key","item","tabIndex","className","onClick","onKeyPress","title","name","contentCard","_Fragment","thumbnailUrl","src","alt","altText","Array","isArray","thumbnail","index","BasemapPanelPlugin","_AppBarPlugin","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","_key","call","_defineProperty","_assertThisInitialized","schema","defaultConfig","en","fr","pluginProps","configObj","_createClass","MapIcon","tooltip","this","translations","displayLanguage","tooltipPlacement","visible","_this$configObj","icon","status","isOpen","loadDefaultBasemaps","AppBarPlugin","plugins","Cast","_AbstractPlugin","createElement","undefined","_this$map","_this$buttonPanel","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","buttonPanel","appBarButtons","createAppbarPanel","content","onCreateContent","panel","changeContent","_this$map2","removeAppbarPanel","buttonPanelId","AbstractPlugin"],"sourceRoot":""}