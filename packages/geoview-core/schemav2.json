{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GeoView Core Config Schema",
  "type": "object",
  "version": 1.0,
  "comments": "Configuration for GeoView core packages, each packages manages it own schema.",
  "additionalProperties": false,

  "definitions": {
    "detailsLayerConfig": {
      "type": "object",
      "properties": {
        "parser": {
          "type": "string",
          "description": "A path to a javascript file with a function for parsing the layers identify output. Only needed if a custom template is being used."
        },
        "template": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "description": "A path to an html template (English) that will override default identify output."
            },
            "fr": {
              "type": "string",
              "description": "A path to an html template (French) that will override default identify output."
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false
        }
      },
      "required": ["template"],
      "additionalProperties": false
    },

    "featureInfoLayerConfig": {
      "type": "object",
      "properties": {
        "queryable": {
          "type": "boolean",
          "default": true,
          "description": "Allow querying. Default = true."
        },
        "customParser": { "$ref": "#/definitions/detailsLayerConfig" },
        "nameField": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "description": "The display field (English) of the layer. If it is not present the viewer will make an attempt to find the first valid field."
            },
            "fr": {
              "type": "string",
              "description": "The display field (French) of the layer. If it is not present the viewer will make an attempt to find the first valid field."
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false
        },
        "tooltipField": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "description": "The field (English) to be used for tooltips. If it is not present the viewer will use nameField (if provided)."
            },
            "fr": {
              "type": "string",
              "description": "The field (French) to be used for tooltips. If it is not present the viewer will use nameField (if provided)."
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false
        },
        "outfields": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "default": "*",
              "description": "A comma separated list of attribute names (English) that should be requested on query (all by default)."
            },
            "fr": {
              "type": "string",
              "default": "*",
              "description": "A comma separated list of attribute names (French) that should be requested on query (all by default)."
            }
          },
          "additionalProperties": false
        },
        "aliasFields": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "default": "",
              "description": "A comma separated list of attribute names (English) that should be use for alias. If empty, no alias will be set if not found."
            },
            "fr": {
              "type": "string",
              "default": "",
              "description": "A comma separated list of attribute names (French) that should be use for alias. If empty, no alias will be set if not found."
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false
        }
      }
    },

    "fillSymbolConfig": {
      "type": "object",
      "description": "Fill style for vector features.",
      "properties": {
        "color": {
          "type": "string"
        }
      },
      "required": ["color"],
      "additionalProperties": false
    },

    "strokeSymbolConfig": {
      "type": "object",
      "description": "Stroke style for vector features.",
      "properties": {
        "color": {
          "type": "string"
        },
        "width": {
          "type": "number"
        }
      },
      "required": ["color", "width"],
      "additionalProperties": false
    },

    "simpleSymbolVectorConfig": {
      "type": "object",
      "properties": {
        "fill": { "$ref": "#/definitions/fillSymbolConfig" },
        "stroke": { "$ref": "#/definitions/strokeSymbolConfig" },
        "radius": { "type": "number" }
      },
      "additionalProperties": false
    },

    "circleSymbolVectorConfig": {
      "type": "object",
      "properties": {
        "fill": { "$ref": "#/definitions/fillSymbolConfig" },
        "stroke": { "$ref": "#/definitions/strokeSymbolConfig" },
        "radius": { "type": "number" }
      },
      "required": ["radius"],
      "additionalProperties": false
    },

    "iconSymbolVectorConfig": {
      "type": "object",
      "properties": {
        "src": { "type": "string" },
        "size": {
          "type": "integer",
          "description": "Icon size in pixel."
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        "crossOrigin": {
          "type": "string",
          "description": "The crossOrigin attribute for loaded images. Note that you must provide a crossOrigin value if you want to access pixel data with the Canvas renderer."
        }
      },
      "additionalProperties": false
    },

    "simpleStyleConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styleType": {
          "enum": ["simple"]
        },
        "label": {
          "type": "string"
        },
        "options": {
          "oneOf": [
            { "$ref": "#/definitions/simpleSymbolVectorConfig" },
            { "$ref": "#/definitions/circleSymbolVectorConfig" },
            { "$ref": "#/definitions/iconSymbolVectorConfig" }
          ]
        }
      },
      "required": ["styleType", "label", "options"],
      "additionalProperties": false
    },

    "uniqueValueStyleConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styleType": {
          "enum": ["uniqueValue"]
        },
        "label": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "uniqueValueStyleInfo": {
          "type": "array",
          "items": {
            "label": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "options": {
              "oneOf": [
                { "$ref": "#/definitions/simpleSymbolVectorConfig" },
                { "$ref": "#/definitions/circleSymbolVectorConfig" },
                { "$ref": "#/definitions/iconSymbolVectorConfig" }
              ]
            }
          },
          "minItems": 2,
          "required": ["label", "values", "options"]
        }
      },
      "required": ["styleType", "label", "fields", "uniqueValueStyleInfo"],
      "additionalProperties": false
    },

    "classBreakStyleConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styleType": {
          "enum": ["classBreak"]
        },
        "label": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "classBreakStyleInfo": {
          "type": "array",
          "items": {
            "label": {
              "type": "string"
            },
            "minValues": {
              "type": "number"
            },
            "maxValues": {
              "type": "number"
            },
            "options": {
              "oneOf": [
                { "$ref": "#/definitions/simpleSymbolVectorConfig" },
                { "$ref": "#/definitions/circleSymbolVectorConfig" },
                { "$ref": "#/definitions/iconSymbolVectorConfig" }
              ]
            }
          },
          "minItems": 2,
          "required": ["label", "minValue", "maxValue", "options"]
        }
      },
      "required": ["styleType", "label", "field", "classBreakStyleInfo"],
      "additionalProperties": false
    },

    "styleConfig": {
      "oneOf": [
        { "$ref": "#/definitions/simpleStyleConfig" },
        { "$ref": "#/definitions/uniqueValueStyleConfig" },
        { "$ref": "#/definitions/classBreakStyleConfig" }
      ]
    },

    "layerBasicInfoConfig": {
      "type": "object",
      "properties": {
        "layerId": {
          "type": "string",
          "description": "The id of the layer to display on the map."
        },
        "layerName": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "description": "The display name of the layer (English). If it is not present the viewer will make an attempt to scrape this information."
            },
            "fr": {
              "type": "string",
              "description": "The display name of the layer (French). If it is not present the viewer will make an attempt to scrape this information."
            }
          },
          "additionalProperties": false
        },
        "metadataUrl": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string",
              "default": null,
              "description": "The metadata url of the layer service (English)."
            },
            "fr": {
              "type": "string",
              "default": null,
              "description": "The metadata url of the layer service (French)."
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false
        }
      },
      "required": ["layerId"],
      "additionalProperties": false
    },

    "layerInitialConfig": {
      "type": "object",
      "properties": {
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "description": "Initial opacity setting."
        },
        "visible": {
          "type": "boolean",
          "default": true,
          "description": "Initial visibility setting."
        },
        "extent": {
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          },
          "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates."
        },
        "minZoom": {
          "type": "integer",
          "minimum": 0,
          "maximum": 50,
          "description": "The minimum view zoom level (exclusive) above which this layer will be visible."
        },
        "maxZoom": {
          "type": "integer",
          "minimum": 0,
          "maximum": 50,
          "description": "The maximum view zoom level (inclusive) above which this layer will be visible."
        },
        "className": {
          "type": "string",
          "description": "A CSS class name to set to the layer element."
        }
      },
      "additionalProperties": false
    },

    "sourceAccessPathConfig": {
      "type": "object",
      "properties": {
        "en": {
          "type": "string",
          "description": "The service endpoint of the layer (English). It should match the type provided in layerType."
        },
        "fr": {
          "type": "string",
          "description": "The service endpoint of the layer (French). It should match the type provided in layerType."
        }
      },
      "required": [
        "en",
        "fr"
      ],
      "additionalProperties": false
    },

    "vectorSourceInitialConfig": {
      "type": "object",
      "properties": {
        "accessPath": { "$ref": "#/definitions/sourceAccessPathConfig" },
        "format": {
          "enum": ["GeoJSON", "EsriJSON", "KML", "WFS", "featureAPI"],
          "description": "The feature format used by the XHR feature loader when access path is set."
        },
        "featureInfo": { "$ref": "#/definitions/featureInfoLayerConfig" },
        "cluster": {
          "type": "object",
          "description": "Cluster vector data on vector layer. Works out of the box with point geometries. If another geometry is provided, it will be converted to points geometry.",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": false
            },
            "distance": {
              "type": "integer",
              "description": "Distance in pixels within which features will be clustered together (deafult 20px)."
            },
            "minDistance": {
              "type": "integer",
              "description": "Minimum distance in pixels between clusters. Will be capped at the configured distance. By default no minimum distance is guaranteed. This config can be used to avoid overlapping icons. As a tradoff, the cluster feature's position will no longer be the center of all its features."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["accessPath", "format"],
      "additionalProperties": false
    },

    "sourceImageInitialConfig": {
      "oneOf": [
        { "$ref": "#/definitions/sourceImageWmsInitialConfig" },
        { "$ref": "#/definitions/sourceImageEsriInitialConfig" }
      ]
    },

    "sourceImageWmsInitialConfig": {
      "type": "object",
      "properties": {
        "accessPath": {
          "$ref": "#/definitions/sourceAccessPathConfig"
        },
        "crossOrigin": {
          "type": "string",
          "description": "The crossOrigin attribute for loaded images. Note that you must provide a crossOrigin value if you want to access pixel data with the Canvas renderer."
        },
        "projection": {
          "type": "integer",
          "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada."
        },
        "featureInfo": {
          "$ref": "#/definitions/featureInfoLayerConfig"
        },
        "sourceType": {"enum": ["WMS"]},
        "serverType": {
          "enum": ["mapserver", "geoserver", "qgis"],
          "description": "The type of the remote WMS server. Not needed for type ESRI"
        },
        "style": {
          "type": "string",
          "default": "",
          "description": "Style to apply"
        }
      },
      "required": ["accessPath", "sourceType", "serverType"],
      "additionalProperties": false
    },

    "sourceImageEsriInitialConfig": {
      "type": "object",
      "properties": {
        "accessPath": {
          "$ref": "#/definitions/sourceAccessPathConfig"
        },
        "crossOrigin": {
          "type": "string",
          "description": "The crossOrigin attribute for loaded images. Note that you must provide a crossOrigin value if you want to access pixel data with the Canvas renderer."
        },
        "projection": {
          "type": "integer",
          "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada."
        },
        "featureInfo": {
          "$ref": "#/definitions/featureInfoLayerConfig"
        },
        "sourceType": {"enum": ["ESRI"]},
        "format": {
          "enum": ["png", "jpg", "gif", "svg"],
          "default": "png",
          "description": "The format of the exported image. The default format is png."
        },
        "transparent": {
          "type": "boolean",
          "default": true,
          "description": "If true, the image will be exported with the background color of the map set as its transparent color. Only the .png and .gif formats support transparency."
        }
      },
      "required": ["accessPath", "sourceType"],
      "additionalProperties": false
    },

    "sourceTileInitialConfig": {
      "sourceType": "object",
      "properties": {
        "accessPath": { "$ref": "#/definitions/sourceAccessPathConfig" },
        "sourceType": {
          "enum": ["XYZ", "GeoTIFF"],
          "default": "XYZ"
        },
        "projection": {
          "type": "integer",
          "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada."
        },
        "tileGrid": {
          "type": "object",
          "properties": {
            "extent": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                },
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates."
            },
            "origin": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided."
            },
            "resolutions": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "Resolutions. The array index of each resolution needs to match the zoom level. This means that even if a minZoom is configured, the resolutions array will have a length of maxZoom + 1."
            },
            "tileSize": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "default": [256, 256],
              "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided."
            }
          },
          "required": ["origin", "resolutions"],
          "additionalProperties": false
        }
      },
      "required": ["accessPath", "sourceType"],
      "additionalProperties": false
    },

    "vectorHeatmapLayerConfig": {
      "type": "object",
      "properties": {
        "info": { "$ref": "#/definitions/layerBasicInfoConfig" },
        "initialSettings": { "$ref": "#/definitions/layerInitialConfig" },
        "layerType": {
          "enum": ["vectorHeatmap"],
          "description": "Layer for rendering vector data as a heatmap. Use points as source. If another geometry is provided, it will be converted to points geometry."
        },
        "source": { "$ref": "#/definitions/vectorSourceInitialConfig" },
        "gradient": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 2,
          "default": ["#00f", "#0ff", "#0f0", "#ff0", "#f00"],
          "description": "Color gradient of the heatmap, specified as an array of CSS color strings."
        },
        "radius": {
          "type": "number",
          "description": "Radius size in pixels (default 8px)."
        },
        "blur": {
          "type": "number",
          "description": "Blur size in pixels (default 15px)."
        },
        "weight": {
          "type": "string",
          "description": "Feature attribute to use for the weight or a function (ADD FORMAT) that returns a weight from a feature."
        }
      },
      "required": ["info", "layerType", "source"],
      "additionalProperties": false
    },

    "vectorLayerConfig": {
      "type": "object",
      "properties": {
        "info": { "$ref": "#/definitions/layerBasicInfoConfig" },
        "initialSettings": { "$ref": "#/definitions/layerInitialConfig" },
        "layerType": {
          "enum": ["vector"],
          "description": "Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering even during animations. Points and labels stay upright on rotated views. For very large amounts of vector data, performance may suffer during pan and zoom animations."
        },
        "source": { "$ref": "#/definitions/vectorSourceInitialConfig" },
        "style": { "$ref": "#/definitions/styleConfig" }
      },
      "required": ["info", "layerType", "source"],
      "additionalProperties": false
    },

    "vectorTileLayerConfig": {
      "type": "object",
      "description": "Layer sources providing vector data divided into a tile grid.",
      "properties": {
        "info": { "$ref": "#/definitions/layerBasicInfoConfig" },
        "initialSettings": { "$ref": "#/definitions/layerInitialConfig" },
        "layerType": {
          "enum": ["vectorTile"],
          "description": "Layer for vector tile data that is rendered client-side."
        },
        "source": {
          "type": "object",
          "description": "Layer sources providing vector data divided into a tile grid.",
          "properties": {
            "accessPath": { "$ref": "#/definitions/sourceAccessPathConfig" },
            "sourceType": {
              "enum": ["vectorTile"],
              "default": "vectorTile"
            },
            "format": {
              "enum": ["GeoJSON", "EsriJSON", "KML", "WFS", "MVT", "featureAPI"],
              "description": "The feature format used by the XHR feature loader when access path is set."
            },
            "featureInfo": { "$ref": "#/definitions/featureInfoLayerConfig" },
            "style": { "$ref": "#/definitions/styleConfig" },
            "projection": {
              "type": "integer",
              "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada."
            },
            "tileGrid": {
              "type": "object",
              "properties": {
                "extent": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates."
                },
                "origin": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided."
                },
                "resolutions": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Resolutions. The array index of each resolution needs to match the zoom level. This means that even if a minZoom is configured, the resolutions array will have a length of maxZoom + 1."
                },
                "tileSize": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "default": [256, 256],
                  "description": "The tile grid origin, i.e. where the x and y axes meet ([z, 0, 0]). Tile coordinates increase left to right and downwards. If not specified, extent must be provided."
                }
              },
              "required": ["origin", "resolutions"],
              "additionalProperties": false
            }
          },
          "required": ["accessPath", "sourceType"],
          "additionalProperties": false
        }
      },
      "required": ["info", "layerType", "source"],
      "additionalProperties": false
    },

    "imageLayerConfig": {
      "type": "object",
      "properties": {
        "info": { "$ref": "#/definitions/layerBasicInfoConfig" },
        "initialSettings": { "$ref": "#/definitions/layerInitialConfig" },
        "layerType": {
          "enum": ["image"],
          "description": "Server-rendered images that are available for arbitrary extents and resolutions like OGC WMS, ESRI MapServer, ESRI ImageServer, ..."
        },
        "source": { "$ref": "#/definitions/sourceImageInitialConfig" }
      },
      "required": ["layerType", "source"],
      "additionalProperties": false
    },

    "tileLayerConfig": {
      "type": "object",
      "properties": {
        "info": { "$ref": "#/definitions/layerBasicInfoConfig" },
        "initialSettings": { "$ref": "#/definitions/layerInitialConfig" },
        "layerType": {
          "enum": ["tile"],
          "description": "Layer sources that provide pre-rendered, tiled images in grids that are organized by zoom levels for specific resolutions like OGC WMTS, GeoTIFF, XYZ, ESRI TileServer, ..."
        },
        "source": { "$ref": "#/definitions/sourceTileInitialConfig" }
      },
      "required": ["info", "layerType", "source"],
      "additionalProperties": false
    },

    "geoCoreLayerConfig": {
      "type": "object",
      "description": "Layer where configration is extracted by a configuration snippet stored on a server. The server configuration will handle bilangual informations.",
      "properties": {
        "info": {
          "type": "object",
          "properties": {
            "layerId": {
              "type": "string",
              "description": "The id of the layer to display on the map."
            },
            "layerName": {
              "type": "object",
              "properties": {
                "en": {
                  "type": "string",
                  "description": "The display name of the layer (English). If it is not present the viewer will make an attempt to scrape this information."
                },
                "fr": {
                  "type": "string",
                  "description": "The display name of the layer (French). If it is not present the viewer will make an attempt to scrape this information."
                }
              },
              "required": [
                "en",
                "fr"
              ],
              "additionalProperties": false
                }
          }
        },
        "accessPath": {
          "type": "string",
          "description": "The url path to the geoCore endpoint (optional, this value should be embeded in the GeoView API)."
        },
        "layerType": {
          "enum": ["geoCore"]
        }
      },
      "required": ["id", "layerType"],
      "additionalProperties": false
    },

    "layerConfig": {
      "type": "object",
      "additionalProperties": false,
      "oneOf": [
        { "$ref": "#/definitions/vectorHeatmapLayerConfig" },
        { "$ref": "#/definitions/vectorTileLayerConfig" },
        { "$ref": "#/definitions/vectorLayerConfig" },
        { "$ref": "#/definitions/imageLayerConfig" },
        { "$ref": "#/definitions/tileLayerConfig" },
        { "$ref": "#/definitions/geoCoreLayerConfig" }
      ]
    },

    "arrayOfLayerConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/layerConfig"
      },
      "minItems": 0
    }
  },

  "properties": {
    "map": {
      "type": "object",
      "properties": {
        "basemapOptions": {
          "type": "object",
          "properties": {
            "id": {
              "enum": ["transport", "simple", "osm", "nogeom"],
              "default": "transport",
              "description": "Id of the basemap to use."
            },
            "shaded": {
              "type": "boolean",
              "default": true,
              "description": "Enable or disable shaded basemap (if basemap id is set to shaded then this should be false)."
            },
            "labeled": {
              "type": "boolean",
              "default": true,
              "description": "Enable or disable basemap labels"
            }
          },
          "required": ["id", "shaded", "labeled"]
        },
        "interaction": {
          "enum": ["static", "dynamic"],
          "default": "dynamic",
          "description": "If map is dynamic (pan/zoom) or static to act as a thumbnail (no nav bar)."
        },
        "geoviewLayerList": {
          "description": "List of GeoView Layers in the order which they should be added to the map.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of the layer for referencing within the viewer (does not relate directly to any external service). The id will have the language extension (id-'lang')."
              },
              "name": {
                "type": "object",
                "properties": {
                  "en": {
                    "type": "string",
                    "description": "The display name of the layer (English). If it is not present the viewer will make an attempt to scrape this information."
                  },
                  "fr": {
                    "type": "string",
                    "description": "The display name of the layer (French). If it is not present the viewer will make an attempt to scrape this information."
                  }
                },
                "additionalProperties": false
              },
              "accessPath": {
                "type": "object",
                "properties": {
                  "en": {
                    "type": "string",
                    "default": null,
                    "description": "The GeoView layer access path (English)."
                  },
                  "fr": {
                    "type": "string",
                    "default": null,
                    "description": "The GeoView layer access path (French)."
                  }
                },
                "required": [
                  "en",
                  "fr"
                ],
                "additionalProperties": false
                    },
              "layerType": {
                "type": "string",
                "items": {
                  "enum": [
                    "esriDynamic",
                    "esriFeature",
                    "geojson",
                    "geoCore",
                    "xyzTiles",
                    "ogcFeature",
                    "ogcWfs",
                    "ogcWms"
                  ]
                },
                "description": "Type of GeoView layer."
              },
              "arrayOfLayerConfig": {
                "$ref": "#/definitions/arrayOfLayerConfig",
                "description": "The layer entries to use from the GeoView layer."
              }
            },
            "required": [
              "id",
              "layerType",
              "accessPath"
            ],
            "additionalProperties": false
          }
        },
        "viewSettings": {
          "type": "object",
          "properties": {
            "center": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number",
                  "minimum": -160,
                  "maximum": 160,
                  "default": -106,
                  "description": "Initial longitude value for map center."
                },
                {
                  "type": "number",
                  "minimum": -80,
                  "maximum": 80,
                  "default": 60,
                  "description": "Initial latitude value for map center."
                }
              ],
              "default": [-106, 60]
            },
            "enableRotation": {
              "type": "boolean",
              "default": true,
              "description": "Enable rotation. If false, a rotation constraint that always sets the rotation to zero is used."
            },
            "extent": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                },
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "description": "The extent that constrains the view. Called with [minX, minY, maxX, maxY] extent coordinates."
            },
            "minZoom": {
              "type": "integer",
              "description": "The minimum zoom level used to determine the resolution constraint. If not set, will use default from basemap.",
              "minimum": 0,
              "maximum": 50
            },
            "maxZoom": {
              "type": "integer",
              "description": "The maximum zoom level used to determine the resolution constraint. If not set, will use default from basemap.",
              "minimum": 0,
              "maximum": 50
            },
            "projection": {
              "enum": [3978, 3857],
              "default": 3978,
              "description": "Spatial Reference EPSG code supported (https://epsg.io/). We support Web Mercator and Lambert Conical Conform Canada."
            },
            "rotation": {
              "type": "integer",
              "minimum": 0,
              "maximum": 360,
              "default": 0,
              "description": "The initial rotation for the view in degree (positive rotation clockwise, 0 means North). Will be converted to radiant by the viewer."
            },
            "zoom": {
              "type": "integer",
              "minimum": 0,
              "maximum": 28,
              "default": 12,
              "description": "Initial map zoom level. Zoom level are define by the basemap zoom levels."
            }
          },
          "required": ["zoom", "center"]
        },
        "extraOptions": {
          "type": "object",
          "description": "Additional options used for OpenLayers map options"
        }
      },
      "required": ["basemapOptions", "interaction", "view"]
    },
    "theme": {
      "enum": ["dark", "light"],
      "default": "dark",
      "description": "Theme style the viewer."
    },
    "appBar": {
      "type": "object",
      "properties": {
        "about": {
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "fr": {
              "type": "string"
            }
          },
          "required": [
            "en",
            "fr"
          ],
          "additionalProperties": false,
          "description": "The content of the about section in Markdown format. If empty, it will be ignored. If not, it will create a button on the appbar to open the panel. In the basic view, this information may be added in a container above the map."
        }
      }
    },
    "navBar": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": ["zoom", "fullscreen", "fullextent"]
      },
      "default": ["zoom", "fullscreen", "fullextent"],
      "description": "Controls availalbe on the navigation bar.",
      "minItems": 0
    },
    "components": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": ["appbar", "navbar", "overview-map", "north-arrow"]
      },
      "default": ["appbar", "navbar", "overview-map", "north-arrow"],
      "description": "Core components to initialize on viewer load. The schema for those are inside this file.",
      "minItems": 0
    },
    "corePackages": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": ["basemap-panel", "layers-panel", "details-panel", "geolocator-panel"]
      },
      "default": ["basemap-panel", "layers-panel", "details-panel", "geolocator-panel"],
      "description": "Core packages to initialize on viewer load. The schema for those are on their own package. NOTE: config from packages are in the same loaction as core config (<<core config name>>-<<package name>>.json).",
      "minItems": 0
    },
    "externalPackages": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "External Package name. The name must be ideintical to the window external package object to load."
          },
          "configUrl": {
            "type": "string",
            "description": "The url to the external package configuration setting. The core package will read the configuration and pass it inside the package."
          }
        },
        "required": ["name"]
      },
      "default": [],
      "description": "List of external packages to initialize on viewer load.",
      "minItems": 0
    },
    "serviceUrls": {
      "type": "object",
      "description": "Service endpoint urls",
      "properties": {
        "keys": {
          "type": "string",
          "default": "https://geocore.api.geo.ca",
          "description": "Service end point to access API for layers specification (loading and plugins parameters). By default it is GeoCore but can be another endpoint with similar output."
        },
        "proxyUrl": {
          "type": "string",
          "description": "An optional proxy to be used for dealing with same-origin issues.  URL must either be a relative path on the same server or an absolute path on a server which sets CORS headers."
        }
      }
    },
    "languages": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": ["en", "fr"]
      },
      "default": ["en", "fr"],
      "description": "ISO 639-1 code indicating the languages supported by the configuration file. It will use value(s) provided here to access bilangual nodes. For value(s) provided here, each bilingual node MUST provide a value.",
      "minItems": 1
    },
    "version": {
      "enum": ["1.0"],
      "description": "The schema version used to validate the configuration file. The schema should enumerate the list of versions accepted by this version of the viewer."
    }
  },
  "required": ["map", "languages", "version"]
}
