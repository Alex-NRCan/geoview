import { Coordinate } from 'ol/coordinate';
import Feature from 'ol/Feature';
import { ProjectionLike } from 'ol/proj';

import { AnySchemaObject } from 'ajv';

import { TypeGeoviewLayerConfig, TypeMapSchemaProps } from '../../geo/map/map-types';
import { TypeGeoViewLayers, AbstractGeoViewLayer } from '../../geo/layer/geoview-layers/abstract-geoview-layers';

import { TypeLangString } from './global-types';

export * from '../../geo/layer/geoview-layers/abstract-geoview-layers';

export { AbstractPlugin } from '../../api/plugin/abstract-plugin';

export * from '../../geo/layer/geoview-layers/raster/esri-dynamic';
export * from '../../geo/layer/geoview-layers/vector/esri-feature';
export * from '../../geo/layer/geoview-layers/vector/geojson';
export * from '../../geo/layer/old-web-layers/map-tile/xyz-tiles';
export * from '../../geo/layer/geoview-layers/vector/ogc_feature';
export * from '../../geo/layer/geoview-layers/vector/wfs';
export * from '../../geo/layer/geoview-layers/raster/wms';

export * from '../../api/events/payloads/basemap-layers-payload';
export * from '../../api/events/payloads/boolean-payload';
export * from '../../api/events/payloads/button-panel-payload';
export * from '../../api/events/payloads/in-keyfocus-payload';
export * from '../../api/events/payloads/lat-long-payload';
export * from '../../api/events/payloads/layer-config-payload';
export * from '../../api/events/payloads/map-component-payload';
export * from '../../api/events/payloads/map-config-payload';
export * from '../../api/events/payloads/map-payload';
export * from '../../api/events/payloads/map-view-projection-payload';
export * from '../../api/events/payloads/marker-definition-payload';
export * from '../../api/events/payloads/modal-payload';
export * from '../../api/events/payloads/number-payload';
export * from '../../api/events/payloads/panel-payload';
export * from '../../api/events/payloads/payload-base-class';
export * from '../../api/events/payloads/slider-payload';
export * from '../../api/events/payloads/snackbar-message-payload';
export * from '../../api/events/payloads/vector-config-payload';
export * from '../../api/events/payloads/vector-payload';
export * from '../../api/events/payloads/geoview-layer-payload';

export * from './material-ui.d';

/**
 * Update scale event properties
 */
export type TypeUpdateScaleEvent = {
  pixels: number;
  distance: string;
};

/**
 * ESRI Json Legend for Dynamic Layer
 */
export type TypeLegendJsonDynamic = {
  layerId: string;
  layerName: string;
  layerType: TypeGeoViewLayers;
  maxScale: number;
  minScale: number;
  legend: {
    contentType: string;
    height: number;
    imageData: string;
    label: string;
    url: string;
    width: number;
  }[];
  extent: {
    xmin: number;
    ymin: number;
    xmax: number;
    ymax: number;
    spatialReference: {
      wkid: number;
      latestWkid: number;
    };
  };
};

export type TypeLayersInWebLayer = Record<string, TypeLayersEntry>;

export type TypeFieldAlias = { [name: string]: string };

export type TypeFoundLayers = {
  layer: TypeLayersEntry;
  entries: TypeEntry[];
};

/**
 * interface for the layers list properties in layers panel
 */
export type TypeLayersPanelListProps = {
  mapId: string;
  layers: Record<string, AbstractGeoViewLayer>;
  language: string;
};

/**
 * Interface used for the panel content
 */
export type TypePanelContentProps = {
  buttonPanel: TypeButtonPanel;
  mapId: string;
};

export type TypeDetailsLayerSettings = {
  parser?: string;
  template: TypeLangString;
};

export interface TypeBasicLayer extends TypeGeoviewLayerConfig {
  metadataUrl?: TypeLangString;
  details?: TypeDetailsLayerSettings;
}

export interface TypeFeatureLayer extends TypeGeoviewLayerConfig {
  metadataUrl?: TypeLangString;
  details?: TypeDetailsLayerSettings;
  nameField?: string;
  tooltipField?: string;
  outfields?: string;
}

export type TypeDynamicLayerEntry = {
  index: number;
  name?: TypeLangString;
  nameField?: string;
  outfields?: string;
};

export interface TypeGeoJSONLayer extends TypeGeoviewLayerConfig {
  nameField?: string;
  tooltipField?: string;
  renderer?: TypeJsonObject;
  details?: TypeDetailsLayerSettings;
}

export type TypeOgcLayerEntry = {
  id: string;
  name?: TypeLangString;
  state?: TypeSourceInitialSettingsNode;
};

export interface TypeWFSLayer extends TypeGeoviewLayerConfig {
  nameField?: string;
  layerEntries: TypeOgcLayerEntry[];
  tooltipField?: string;
  renderer?: TypeJsonObject;
  details?: TypeDetailsLayerSettings;
}

export interface TypeWMSLayerConfig extends TypeGeoviewLayerConfig {
  metadataUrl?: TypeLangString;
  layerEntries: TypeOgcLayerEntry[];
  details?: TypeDetailsLayerSettings;
}

export interface TypeGeometryEndpointLayer extends TypeGeoviewLayerConfig {
  name: TypeLangString;
  nameField?: string;
  tooltipField?: string;
  renderer?: TypeJsonObject;
  details?: TypeDetailsLayerSettings;
}

export interface TypeGeoCoreLayer extends Omit<TypeGeoviewLayerConfig, 'url'> {
  id: string;
  url?: string;
}

export interface TypeXYZTiles extends TypeGeoviewLayerConfig {
  // may seems useless, but ensure attribute defined as TypeXYZTiles keeps its native type
  state?: TypeSourceInitialSettingsNode;
}

export interface TypeOgcFeatureLayer extends TypeGeoviewLayerConfig {
  metadataUrl?: TypeLangString;
  layerEntries: TypeOgcLayerEntry[];
  details?: TypeDetailsLayerSettings;
}

export type TypeNorthArrowProps = TypeJsonObject;

/**
 * interface for attribution value
 */
export type TypeAttribution = {
  'en-CA': string;
  'fr-CA': string;
};

/*-----------------------------------------------------------------------------
 *
 * UI Types
 *
 *---------------------------------------------------------------------------*/

/**
 * Customized Material UI Autocomplete properties
 */
export interface TypeAutocompleteProps<
  T,
  Multiple extends boolean | undefined = undefined,
  DisableClearable extends boolean | undefined = undefined,
  FreeSolo extends boolean | undefined = undefined
> extends AutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {
  mapId?: string;
  fullWidth?: boolean;
}

/**
 * Type for return value for feature layer like GeoJSON, OGC API, Vector
 */
export type TypeFilterFeatures = {
  pass: Feature[];
  fail: Feature[];
};

/**
 * Type for building filter query
 */
export type TypeFilterQuery = {
  connector?: '&&' | '||';
  field: string;
  operator: '===' | '!==' | '<=' | '>=' | '<' | '>';
  value: string | number;
};

export const FILTER_OPERATOR: { [key: string]: (a: string | number, b: string | number) => boolean } = {
  '===': (a: string | number, b: string | number) => {
    return a === b;
  },
  '==': (a: string | number, b: string | number) => {
    // eslint-disable-next-line eqeqeq
    return a == b;
  },
  '<=': (a: string | number, b: string | number) => {
    return a <= b;
  },
  '>=': (a: string | number, b: string | number) => {
    return a >= b;
  },
  '<': (a: string | number, b: string | number) => {
    return a < b;
  },
  '>': (a: string | number, b: string | number) => {
    return a > b;
  },
};
